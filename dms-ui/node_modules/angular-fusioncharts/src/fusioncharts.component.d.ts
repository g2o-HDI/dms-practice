import { ElementRef, OnInit, OnChanges, DoCheck, AfterViewInit, OnDestroy, KeyValueDiffers, NgZone, EventEmitter } from '@angular/core';
import { FusionChartsService } from './fusioncharts.service';
import FusionChartsEvent from '../interfaces/FusionChartsEvent';
import FusionChartInstance from '../interfaces/FusionChartInstance';
import * as Éµngcc0 from '@angular/core';
declare class FusionChartsComponent implements OnInit, OnChanges, DoCheck, AfterViewInit, OnDestroy {
    private differs;
    private zone;
    chartObj: any;
    placeholder: string;
    dataSource: any;
    type: string;
    id: string;
    width: string;
    height: string;
    renderAt: string;
    dataFormat: string;
    events: string;
    link: string;
    showDataLoadingMessage: boolean;
    showChartLoadingMessage: boolean;
    baseChartMessageFont: string;
    baseChartMessageFontSize: string;
    baseChartMessageColor: string;
    dataLoadStartMessage: string;
    dataLoadErrorMessage: string;
    dataInvalidMessage: string;
    dataEmptyMessage: string;
    typeNotSupportedMessage: string;
    loadMessage: string;
    renderErrorMessage: string;
    containerBackgroundColor: string;
    containerBackgroundOpacity: string;
    containerClassName: string;
    baseChartMessageImageHAlign: string;
    baseChartMessageImageVAlign: string;
    baseChartMessageImageAlpha: number;
    baseChartMessageImageScale: number;
    typeNotSupportedMessageImageHAlign: string;
    typeNotSupportedMessageImageVAlign: string;
    typeNotSupportedMessageImageAlpha: number;
    typeNotSupportedMessageImageScale: number;
    dataLoadErrorMessageImageHAlign: string;
    dataLoadErrorMessageImageVAlign: string;
    dataLoadErrorMessageImageAlpha: number;
    dataLoadErrorMessageImageScale: number;
    dataLoadStartMessageImageHAlign: string;
    dataLoadStartMessageImageVAlign: string;
    dataLoadStartMessageImageAlpha: number;
    dataLoadStartMessageImageScale: number;
    dataInvalidMessageImageHAlign: string;
    dataInvalidMessageImageVAlign: string;
    dataInvalidMessageImageAlpha: number;
    dataInvalidMessageImageScale: number;
    dataEmptyMessageImageHAlign: string;
    dataEmptyMessageImageVAlign: string;
    dataEmptyMessageImageAlpha: number;
    dataEmptyMessageImageScale: number;
    renderErrorMessageImageHAlign: string;
    renderErrorMessageImageVAlign: string;
    renderErrorMessageImageAlpha: number;
    renderErrorMessageImageScale: number;
    loadMessageImageHAlign: string;
    loadMessageImageVAlign: string;
    loadMessageImageAlpha: number;
    loadMessageImageScale: number;
    chartConfig: string;
    /**
     * All Events List
     */
    private eventList;
    /**
     * All events emitter
     */
    beforeLinkedItemOpen: EventEmitter<FusionChartsEvent>;
    linkedItemOpened: EventEmitter<FusionChartsEvent>;
    beforeLinkedItemClose: EventEmitter<FusionChartsEvent>;
    linkedItemClosed: EventEmitter<FusionChartsEvent>;
    printReadyStateChange: EventEmitter<FusionChartsEvent>;
    dataLoadRequestCompleted: EventEmitter<FusionChartsEvent>;
    dataLoadError: EventEmitter<FusionChartsEvent>;
    dataLoadCancelled: EventEmitter<FusionChartsEvent>;
    dataLoadRequestCancelled: EventEmitter<FusionChartsEvent>;
    dataUpdated: EventEmitter<FusionChartsEvent>;
    dataUpdateCancelled: EventEmitter<FusionChartsEvent>;
    dataLoadRequested: EventEmitter<FusionChartsEvent>;
    beforeDataUpdate: EventEmitter<FusionChartsEvent>;
    realTimeUpdateComplete: EventEmitter<FusionChartsEvent>;
    chartCleared: EventEmitter<FusionChartsEvent>;
    slicingEnd: EventEmitter<FusionChartsEvent>;
    slicingStart: EventEmitter<FusionChartsEvent>;
    entityRollOut: EventEmitter<FusionChartsEvent>;
    entityRollOver: EventEmitter<FusionChartsEvent>;
    entityClick: EventEmitter<FusionChartsEvent>;
    connectorRollOver: EventEmitter<FusionChartsEvent>;
    connectorRollOut: EventEmitter<FusionChartsEvent>;
    connectorClick: EventEmitter<FusionChartsEvent>;
    markerRollOver: EventEmitter<FusionChartsEvent>;
    markerRollOut: EventEmitter<FusionChartsEvent>;
    markerClick: EventEmitter<FusionChartsEvent>;
    pageNavigated: EventEmitter<FusionChartsEvent>;
    rotationEnd: EventEmitter<FusionChartsEvent>;
    rotationStart: EventEmitter<FusionChartsEvent>;
    centerLabelRollover: EventEmitter<FusionChartsEvent>;
    centerLabelRollout: EventEmitter<FusionChartsEvent>;
    centerLabelClick: EventEmitter<FusionChartsEvent>;
    centerLabelChanged: EventEmitter<FusionChartsEvent>;
    chartClick: EventEmitter<FusionChartsEvent>;
    chartMouseMove: EventEmitter<FusionChartsEvent>;
    chartRollOver: EventEmitter<FusionChartsEvent>;
    chartRollOut: EventEmitter<FusionChartsEvent>;
    backgroundLoaded: EventEmitter<FusionChartsEvent>;
    backgroundLoadError: EventEmitter<FusionChartsEvent>;
    legendItemClicked: EventEmitter<FusionChartsEvent>;
    legendItemRollover: EventEmitter<FusionChartsEvent>;
    legendItemRollout: EventEmitter<FusionChartsEvent>;
    logoRollover: EventEmitter<FusionChartsEvent>;
    logoRollout: EventEmitter<FusionChartsEvent>;
    logoClick: EventEmitter<FusionChartsEvent>;
    logoLoaded: EventEmitter<FusionChartsEvent>;
    logoLoadError: EventEmitter<FusionChartsEvent>;
    beforeExport: EventEmitter<FusionChartsEvent>;
    exported: EventEmitter<FusionChartsEvent>;
    exportCancelled: EventEmitter<FusionChartsEvent>;
    beforePrint: EventEmitter<FusionChartsEvent>;
    printComplete: EventEmitter<FusionChartsEvent>;
    printCancelled: EventEmitter<FusionChartsEvent>;
    dataLabelClick: EventEmitter<FusionChartsEvent>;
    dataLabelRollOver: EventEmitter<FusionChartsEvent>;
    dataLabelRollOut: EventEmitter<FusionChartsEvent>;
    scrollStart: EventEmitter<FusionChartsEvent>;
    scrollEnd: EventEmitter<FusionChartsEvent>;
    onScroll: EventEmitter<FusionChartsEvent>;
    zoomReset: EventEmitter<FusionChartsEvent>;
    zoomedOut: EventEmitter<FusionChartsEvent>;
    zoomedIn: EventEmitter<FusionChartsEvent>;
    zoomed: EventEmitter<FusionChartsEvent>;
    zoomModeChanged: EventEmitter<FusionChartsEvent>;
    pinned: EventEmitter<FusionChartsEvent>;
    dataRestored: EventEmitter<FusionChartsEvent>;
    beforeDataSubmit: EventEmitter<FusionChartsEvent>;
    dataSubmitError: EventEmitter<FusionChartsEvent>;
    dataSubmitted: EventEmitter<FusionChartsEvent>;
    dataSubmitCancelled: EventEmitter<FusionChartsEvent>;
    chartUpdated: EventEmitter<FusionChartsEvent>;
    nodeAdded: EventEmitter<FusionChartsEvent>;
    nodeUpdated: EventEmitter<FusionChartsEvent>;
    nodeDeleted: EventEmitter<FusionChartsEvent>;
    connectorAdded: EventEmitter<FusionChartsEvent>;
    connectorUpdated: EventEmitter<FusionChartsEvent>;
    connectorDeleted: EventEmitter<FusionChartsEvent>;
    labelAdded: EventEmitter<FusionChartsEvent>;
    labelDeleted: EventEmitter<FusionChartsEvent>;
    selectionRemoved: EventEmitter<FusionChartsEvent>;
    selectionStart: EventEmitter<FusionChartsEvent>;
    selectionEnd: EventEmitter<FusionChartsEvent>;
    labelClick: EventEmitter<FusionChartsEvent>;
    labelRollOver: EventEmitter<FusionChartsEvent>;
    labelRollOut: EventEmitter<FusionChartsEvent>;
    labelDragStart: EventEmitter<FusionChartsEvent>;
    labelDragEnd: EventEmitter<FusionChartsEvent>;
    dataplotDragStart: EventEmitter<FusionChartsEvent>;
    dataplotDragEnd: EventEmitter<FusionChartsEvent>;
    processClick: EventEmitter<FusionChartsEvent>;
    processRollOver: EventEmitter<FusionChartsEvent>;
    processRollOut: EventEmitter<FusionChartsEvent>;
    categoryClick: EventEmitter<FusionChartsEvent>;
    categoryRollOver: EventEmitter<FusionChartsEvent>;
    categoryRollOut: EventEmitter<FusionChartsEvent>;
    milestoneClick: EventEmitter<FusionChartsEvent>;
    milestoneRollOver: EventEmitter<FusionChartsEvent>;
    milestoneRollOut: EventEmitter<FusionChartsEvent>;
    chartTypeChanged: EventEmitter<FusionChartsEvent>;
    overlayButtonClick: EventEmitter<FusionChartsEvent>;
    loaded: EventEmitter<FusionChartsEvent>;
    rendered: EventEmitter<FusionChartsEvent>;
    drawComplete: EventEmitter<FusionChartsEvent>;
    renderComplete: EventEmitter<FusionChartsEvent>;
    dataInvalid: EventEmitter<FusionChartsEvent>;
    dataXMLInvalid: EventEmitter<FusionChartsEvent>;
    dataLoaded: EventEmitter<FusionChartsEvent>;
    noDataToDisplay: EventEmitter<FusionChartsEvent>;
    legendPointerDragStart: EventEmitter<FusionChartsEvent>;
    legendPointerDragStop: EventEmitter<FusionChartsEvent>;
    legendRangeUpdated: EventEmitter<FusionChartsEvent>;
    alertComplete: EventEmitter<FusionChartsEvent>;
    realTimeUpdateError: EventEmitter<FusionChartsEvent>;
    dataplotRollOver: EventEmitter<FusionChartsEvent>;
    dataplotRollOut: EventEmitter<FusionChartsEvent>;
    dataplotClick: EventEmitter<FusionChartsEvent>;
    linkClicked: EventEmitter<FusionChartsEvent>;
    beforeRender: EventEmitter<FusionChartsEvent>;
    renderCancelled: EventEmitter<FusionChartsEvent>;
    beforeResize: EventEmitter<FusionChartsEvent>;
    resized: EventEmitter<FusionChartsEvent>;
    resizeCancelled: EventEmitter<FusionChartsEvent>;
    beforeDispose: EventEmitter<FusionChartsEvent>;
    disposed: EventEmitter<FusionChartsEvent>;
    disposeCancelled: EventEmitter<FusionChartsEvent>;
    linkedChartInvoked: EventEmitter<FusionChartsEvent>;
    beforeDrillDown: EventEmitter<FusionChartsEvent>;
    drillDown: EventEmitter<FusionChartsEvent>;
    beforeDrillUp: EventEmitter<FusionChartsEvent>;
    drillUp: EventEmitter<FusionChartsEvent>;
    drillDownCancelled: EventEmitter<FusionChartsEvent>;
    drillUpCancelled: EventEmitter<FusionChartsEvent>;
    initialized: EventEmitter<FusionChartInstance>;
    containerId: string;
    private configObj;
    private oldDataSource;
    private oldDataTable;
    private constructerParams;
    element: ElementRef;
    fusionchartsService: FusionChartsService;
    constructor(element: ElementRef, fusionchartsService: FusionChartsService, differs: KeyValueDiffers, zone: NgZone);
    checkIfDataTableExists(dataSource: any): boolean;
    cloneDataSource(obj: any): any;
    ngOnInit(): void;
    ngOnChanges(changes: any): void;
    ngDoCheck(): void;
    updateChartData(): void;
    updateWidth(): void;
    updateHeight(): void;
    updateType(): void;
    generateEventsCallback(eventList: Array<string>): {};
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    static Éµfac: Éµngcc0.ÉµÉµFactoryDef<FusionChartsComponent, never>;
    static Éµcmp: Éµngcc0.ÉµÉµComponentDefWithMeta<FusionChartsComponent, "fusioncharts", never, { "placeholder": "placeholder"; "dataSource": "dataSource"; "type": "type"; "id": "id"; "width": "width"; "height": "height"; "renderAt": "renderAt"; "dataFormat": "dataFormat"; "events": "events"; "link": "link"; "showDataLoadingMessage": "showDataLoadingMessage"; "showChartLoadingMessage": "showChartLoadingMessage"; "baseChartMessageFont": "baseChartMessageFont"; "baseChartMessageFontSize": "baseChartMessageFontSize"; "baseChartMessageColor": "baseChartMessageColor"; "dataLoadStartMessage": "dataLoadStartMessage"; "dataLoadErrorMessage": "dataLoadErrorMessage"; "dataInvalidMessage": "dataInvalidMessage"; "dataEmptyMessage": "dataEmptyMessage"; "typeNotSupportedMessage": "typeNotSupportedMessage"; "loadMessage": "loadMessage"; "renderErrorMessage": "renderErrorMessage"; "containerBackgroundColor": "containerBackgroundColor"; "containerBackgroundOpacity": "containerBackgroundOpacity"; "containerClassName": "containerClassName"; "baseChartMessageImageHAlign": "baseChartMessageImageHAlign"; "baseChartMessageImageVAlign": "baseChartMessageImageVAlign"; "baseChartMessageImageAlpha": "baseChartMessageImageAlpha"; "baseChartMessageImageScale": "baseChartMessageImageScale"; "typeNotSupportedMessageImageHAlign": "typeNotSupportedMessageImageHAlign"; "typeNotSupportedMessageImageVAlign": "typeNotSupportedMessageImageVAlign"; "typeNotSupportedMessageImageAlpha": "typeNotSupportedMessageImageAlpha"; "typeNotSupportedMessageImageScale": "typeNotSupportedMessageImageScale"; "dataLoadErrorMessageImageHAlign": "dataLoadErrorMessageImageHAlign"; "dataLoadErrorMessageImageVAlign": "dataLoadErrorMessageImageVAlign"; "dataLoadErrorMessageImageAlpha": "dataLoadErrorMessageImageAlpha"; "dataLoadErrorMessageImageScale": "dataLoadErrorMessageImageScale"; "dataLoadStartMessageImageHAlign": "dataLoadStartMessageImageHAlign"; "dataLoadStartMessageImageVAlign": "dataLoadStartMessageImageVAlign"; "dataLoadStartMessageImageAlpha": "dataLoadStartMessageImageAlpha"; "dataLoadStartMessageImageScale": "dataLoadStartMessageImageScale"; "dataInvalidMessageImageHAlign": "dataInvalidMessageImageHAlign"; "dataInvalidMessageImageVAlign": "dataInvalidMessageImageVAlign"; "dataInvalidMessageImageAlpha": "dataInvalidMessageImageAlpha"; "dataInvalidMessageImageScale": "dataInvalidMessageImageScale"; "dataEmptyMessageImageHAlign": "dataEmptyMessageImageHAlign"; "dataEmptyMessageImageVAlign": "dataEmptyMessageImageVAlign"; "dataEmptyMessageImageAlpha": "dataEmptyMessageImageAlpha"; "dataEmptyMessageImageScale": "dataEmptyMessageImageScale"; "renderErrorMessageImageHAlign": "renderErrorMessageImageHAlign"; "renderErrorMessageImageVAlign": "renderErrorMessageImageVAlign"; "renderErrorMessageImageAlpha": "renderErrorMessageImageAlpha"; "renderErrorMessageImageScale": "renderErrorMessageImageScale"; "loadMessageImageHAlign": "loadMessageImageHAlign"; "loadMessageImageVAlign": "loadMessageImageVAlign"; "loadMessageImageAlpha": "loadMessageImageAlpha"; "loadMessageImageScale": "loadMessageImageScale"; "chartConfig": "chartConfig"; }, { "beforeLinkedItemOpen": "beforeLinkedItemOpen"; "linkedItemOpened": "linkedItemOpened"; "beforeLinkedItemClose": "beforeLinkedItemClose"; "linkedItemClosed": "linkedItemClosed"; "printReadyStateChange": "printReadyStateChange"; "dataLoadRequestCompleted": "dataLoadRequestCompleted"; "dataLoadError": "dataLoadError"; "dataLoadCancelled": "dataLoadCancelled"; "dataLoadRequestCancelled": "dataLoadRequestCancelled"; "dataUpdated": "dataUpdated"; "dataUpdateCancelled": "dataUpdateCancelled"; "dataLoadRequested": "dataLoadRequested"; "beforeDataUpdate": "beforeDataUpdate"; "realTimeUpdateComplete": "realTimeUpdateComplete"; "chartCleared": "chartCleared"; "slicingEnd": "slicingEnd"; "slicingStart": "slicingStart"; "entityRollOut": "entityRollOut"; "entityRollOver": "entityRollOver"; "entityClick": "entityClick"; "connectorRollOver": "connectorRollOver"; "connectorRollOut": "connectorRollOut"; "connectorClick": "connectorClick"; "markerRollOver": "markerRollOver"; "markerRollOut": "markerRollOut"; "markerClick": "markerClick"; "pageNavigated": "pageNavigated"; "rotationEnd": "rotationEnd"; "rotationStart": "rotationStart"; "centerLabelRollover": "centerLabelRollover"; "centerLabelRollout": "centerLabelRollout"; "centerLabelClick": "centerLabelClick"; "centerLabelChanged": "centerLabelChanged"; "chartClick": "chartClick"; "chartMouseMove": "chartMouseMove"; "chartRollOver": "chartRollOver"; "chartRollOut": "chartRollOut"; "backgroundLoaded": "backgroundLoaded"; "backgroundLoadError": "backgroundLoadError"; "legendItemClicked": "legendItemClicked"; "legendItemRollover": "legendItemRollover"; "legendItemRollout": "legendItemRollout"; "logoRollover": "logoRollover"; "logoRollout": "logoRollout"; "logoClick": "logoClick"; "logoLoaded": "logoLoaded"; "logoLoadError": "logoLoadError"; "beforeExport": "beforeExport"; "exported": "exported"; "exportCancelled": "exportCancelled"; "beforePrint": "beforePrint"; "printComplete": "printComplete"; "printCancelled": "printCancelled"; "dataLabelClick": "dataLabelClick"; "dataLabelRollOver": "dataLabelRollOver"; "dataLabelRollOut": "dataLabelRollOut"; "scrollStart": "scrollStart"; "scrollEnd": "scrollEnd"; "onScroll": "onScroll"; "zoomReset": "zoomReset"; "zoomedOut": "zoomedOut"; "zoomedIn": "zoomedIn"; "zoomed": "zoomed"; "zoomModeChanged": "zoomModeChanged"; "pinned": "pinned"; "dataRestored": "dataRestored"; "beforeDataSubmit": "beforeDataSubmit"; "dataSubmitError": "dataSubmitError"; "dataSubmitted": "dataSubmitted"; "dataSubmitCancelled": "dataSubmitCancelled"; "chartUpdated": "chartUpdated"; "nodeAdded": "nodeAdded"; "nodeUpdated": "nodeUpdated"; "nodeDeleted": "nodeDeleted"; "connectorAdded": "connectorAdded"; "connectorUpdated": "connectorUpdated"; "connectorDeleted": "connectorDeleted"; "labelAdded": "labelAdded"; "labelDeleted": "labelDeleted"; "selectionRemoved": "selectionRemoved"; "selectionStart": "selectionStart"; "selectionEnd": "selectionEnd"; "labelClick": "labelClick"; "labelRollOver": "labelRollOver"; "labelRollOut": "labelRollOut"; "labelDragStart": "labelDragStart"; "labelDragEnd": "labelDragEnd"; "dataplotDragStart": "dataplotDragStart"; "dataplotDragEnd": "dataplotDragEnd"; "processClick": "processClick"; "processRollOver": "processRollOver"; "processRollOut": "processRollOut"; "categoryClick": "categoryClick"; "categoryRollOver": "categoryRollOver"; "categoryRollOut": "categoryRollOut"; "milestoneClick": "milestoneClick"; "milestoneRollOver": "milestoneRollOver"; "milestoneRollOut": "milestoneRollOut"; "chartTypeChanged": "chartTypeChanged"; "overlayButtonClick": "overlayButtonClick"; "loaded": "loaded"; "rendered": "rendered"; "drawComplete": "drawComplete"; "renderComplete": "renderComplete"; "dataInvalid": "dataInvalid"; "dataXMLInvalid": "dataXMLInvalid"; "dataLoaded": "dataLoaded"; "noDataToDisplay": "noDataToDisplay"; "legendPointerDragStart": "legendPointerDragStart"; "legendPointerDragStop": "legendPointerDragStop"; "legendRangeUpdated": "legendRangeUpdated"; "alertComplete": "alertComplete"; "realTimeUpdateError": "realTimeUpdateError"; "dataplotRollOver": "dataplotRollOver"; "dataplotRollOut": "dataplotRollOut"; "dataplotClick": "dataplotClick"; "linkClicked": "linkClicked"; "beforeRender": "beforeRender"; "renderCancelled": "renderCancelled"; "beforeResize": "beforeResize"; "resized": "resized"; "resizeCancelled": "resizeCancelled"; "beforeDispose": "beforeDispose"; "disposed": "disposed"; "disposeCancelled": "disposeCancelled"; "linkedChartInvoked": "linkedChartInvoked"; "beforeDrillDown": "beforeDrillDown"; "drillDown": "drillDown"; "beforeDrillUp": "beforeDrillUp"; "drillUp": "drillUp"; "drillDownCancelled": "drillDownCancelled"; "drillUpCancelled": "drillUpCancelled"; "initialized": "initialized"; }, never, never>;
}
export { FusionChartsComponent };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,